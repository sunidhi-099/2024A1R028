//lab exp 10                15/4
#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct Node{
    int data;
    struct Node *next;
};
struct Node* top = NULL;
void push(int value){
    struct Node *temp = (struct Node*)malloc(sizeof(struct Node));
    if(temp==NULL)
        printf("Stack Overflow!!\n");
    else{
        temp->data = value;
        temp->next = top;
        top = temp;
        printf("Element %d push in the stack!!\n",value);
    }
}

int pop(){
    if(top==NULL){
        printf("Stack Underflow!!\n");
        return -1;
    }
    else{
        struct Node* temp = top;
        top=top->next;
        int val=temp->data;
        free(temp);
        return val;
    }
}

int peek(){
    if(top==NULL)
        printf("Stack id empty!!\n");
    else
        return top->data;
}

void show(){
    if(top==NULL)
        printf("Stack is empty!!\n");
    else{
        printf("Stack elements are: ");
        struct Node* temp = top;
        while(temp!=NULL){
            printf("%d\n",temp->data);
            temp=temp->next;
        }
    }
}
int main(){
    while(1){
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Show\n");
        printf("5. Exit\n");
        int choice, val,res;
        printf("Enter choice : ");
        scanf("%d", &choice);
        switch(choice){
            case 1:
                printf("Enter value: ");
                scanf("%d",&val);
                push(val);
                break;
            case 2:
                res=pop();
                if(res != -1)
                    printf("%d pop from the stack\n",res);
                break;
            case 3:
                res=peek();
                if(res != -1)
                    printf("Top element is %d\n",res);
                break;
            case 4:
                show();
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("INVALID CHOICE !!!!\n");
        }
        printf("\n");
        //system("pause");
    }
    return 0;
}
