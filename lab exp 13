/Implement a Binary Tree using Array and develop functions to perform traversal, searching, insertion and deletion operations. 
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 100
int size= 0; //number of nodes in the tree
int tree[MAX]; 
void initialize(){
    for(int i=0; i<MAX; i++)
        tree[i] = -1;
}
void insert(int n){ //inserting the data in level form
    for (int i = size; i < n; i++){
        scanf("%d",&tree[size++]);
    }
}

//recursive transversal
void preorder(int root){
    if (tree[root] == -1){
        return;
    }
    printf("%d ",tree[root]);
    preorder(2*root + 1);
    preorder(2*root + 2);
}
void inorder(int root){
    if (tree[root] == -1){
        return;
    }
    inorder (2*root + 1);
    printf("%d ",tree[root]);
    inorder (2*root + 2);
}
void postorder(int root){
    if (tree[root] == -1){
        return;
    }
    postorder (2*root + 1);
    postorder (2*root + 2);
    printf("%d ",tree[root]);
}
int search (int target,int root){
    if (tree[root] == -1){
       return -1;
    }
    if (tree[root] == target){
        printf("Found %d at index %d\n",target,root);
        return 1;
    }
    return search(target,2*root + 1) || search(target,2*root + 2);
}
int searchbyiteration(int target){
    for (int i = 0; i < size; i++){
        if (tree[i] == target){
            printf("Found %d at index %d\n",target,i);
            return i;
        }
    }
    return -1;
}

void delete(int val, int root){
    int i = searchbyiteration(val);
    if (i != -1){
        tree[i] = tree[size - 1];
        tree[size - 1] = -1;
        size--;
    }
    else{
        printf("Element not found\n");
    }
}
int main(){        
    int choice, n, target, val;

    initialize(); // Initialize the tree at the start

    while (1){
        printf("\nBinary Tree Operations:\n");
        printf("1. Insert Elements\n");
        printf("2. Preorder Traversal\n");
        printf("3. Inorder Traversal\n");
        printf("4. Postorder Traversal\n");
        printf("5. Search Element\n");
        printf("6. Delete Element\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter number of elements to insert: ");
                scanf("%d", &n);
                printf("Enter the elements: ");
                insert(n);
                break;
            case 2:
                printf("Preorder Traversal: ");
                preorder(0);
                printf("\n");
                break;
            case 3:
                printf("Inorder Traversal: ");
                inorder(0);
                printf("\n");
                break;
            case 4:
                printf("Postorder Traversal: ");
                postorder(0);
                printf("\n");
                break;
            case 5:
                printf("Enter element to search: ");
                scanf("%d", &target);
                if (search(target, 0) == -1) {
                    printf("Element not found.\n");
                }
                break;
            case 6:
                printf("Enter element to delete: ");
                scanf("%d", &val);
                delete(val, 0);
                break;
            case 7:
                exit(0);    
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
}
