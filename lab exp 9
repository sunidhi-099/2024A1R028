//LAB EXP 9              10/4
#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
struct Node* head=NULL;
struct Node* createNode(int ele){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = ele;
    temp->next = NULL;
    return temp;
}

void insertNodeInBeg(int ele){
    struct Node* newNode = createNode(ele);
    if(head==NULL){
        head=newNode;
        head->next = head;
    }
    else{
        newNode->next = head;
        struct Node* temp = head;
        while(temp->next!=head){
            temp=temp->next;
        }
        temp->next = newNode;
        head = newNode;
    } 
    printf("Node Inserted!!\n");
}

void insertNodeAtEnd(int ele){
    struct Node* newNode = createNode(ele);
    if(head==NULL){
        head=newNode;
        head->next = head;
    }
    else{
        struct Node* temp = head;
        while(temp->next!=head){
            temp=temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    } 
    printf("Node Inserted!!\n");  
}

void insertNodeAtAnyPos(int ele, int pos){
    if(head==NULL)
        printf("List is empty!!\n");
    else if(pos==1){
        insertNodeInBeg(ele);
    }
    else{
        struct Node* temp = head;
        int i=1;
        while(i<pos-1 && temp->next != head){
            temp = temp->next;
            i++;
        }
        if(temp->next != head && i>1){
            struct Node* newNode = createNode(ele);
            newNode->next = temp->next;
            temp->next=newNode;
            printf("Node Inserted!!\n");
        }
        else
            printf("Invalid position!!!\n");
    }
}

void deleteNodeFromBeg(){
    if(head==NULL)
        printf("List is empty!!\n");
    else if(head->next==head){          //if list contain only single node
        struct Node* temp = head;
        head=NULL;
        free(temp);
        printf("Node deleted!!\n");
    }
    else{                       // if list contain more than 1 node
        struct Node* temp = head;
        while(temp->next!=head){
            temp=temp->next;
        }
        struct Node* t = head;
        head = head->next;
        temp->next = head;
        free(t);
        printf("Node deleted!!\n");
    }
}

void deleteNodeFromEnd(){
    if(head==NULL)
        printf("List is empty!!\n");
    else if(head->next==head){           //if list contain only single node
        struct Node* temp = head;
        head=NULL;
        free(temp);
    }
    else{                                 // if list contain more than 1 node
        struct Node* temp = head;
        while(temp->next->next != head){
            temp = temp->next;
        }
        struct Node* t = temp->next;
        temp->next=head;
        free(t);
        printf("Node deleted!!\n");
    }
}

void deleteNodeFromAnyPos(int pos){
    if(head==NULL)
        printf("List is empty!!\n");
    else if(pos==1){
        deleteNodeFromBeg();
    }
    else{
        struct Node* temp = head;
        int i=1;
        while(i<pos-1 && temp->next != head){
            i++;
            temp = temp->next;
        }
        if(temp->next != head && pos>0){
            struct Node* t= temp->next;
            temp->next=temp->next->next;
            free(t);
            printf("Node Deleted!!\n");
        }
        else
            printf("Invalid position!!!\n");
    }
}

void search(int target){
    if(head==NULL){
        printf("List is empty!!\n");
    }
    else{
        struct Node* temp = head;
        do{
            if(target==temp->data){
            printf("Found!!\n");
            return;
            }
            temp=temp->next;
        }while(temp!=head);
        printf("Not Found!!\n");
    }
}

void display(){
    if(head==NULL){
        printf("List is empty!!\n");
    }
    else{
        struct Node* temp = head;
        do{
            printf("%d ",temp->data);
            temp=temp->next;
        }while(temp!=head);
    }
}
int main(){
    while(1){
        printf(".......CIRCULAR SINGLY LINKED LIST.......\n");
        printf("1. Insert Node in Beginning\n");
        printf("2. Insert Node in End\n");
        printf("3. Insert Node at any position\n");
        printf("4. Delete Node from beginning \n");
        printf("5. Delete Node from end \n");
        printf("6. Delete Node from any position \n");
        printf("7. Search element in list\n");
        printf("8. Display elements\n");
        printf("9. Exit\n");
        int choice,value,pos;
        printf("Enter choice: ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                printf("Enter value: ");
                scanf("%d",&value);
                insertNodeInBeg(value);
                break;
            case 2:
            printf("Enter value: ");
            scanf("%d",&value);
            insertNodeAtEnd(value);
            break;
        case 3:
            printf("Enter value: ");
            scanf("%d",&value);
            printf("Enter position: ");
            scanf("%d",&pos);
            insertNodeAtAnyPos(value,pos);
            break;
        case 4:
            deleteNodeFromBeg();
            break;
        case 5:
            deleteNodeFromEnd();
            break;
        case 6:
            printf("Enter position: ");
            scanf("%d",&pos);
            deleteNodeFromAnyPos(pos);
            break;
        case 7:
            printf("Enter value: ");
            scanf("%d",&value);
            search(value);
            break;
        case 8:
            display();
            break;
        case 9:
            exit(0);
        default:
            printf("Invalid choice !!!\n");
    }
    printf("\n");
        }
        return 0;
    }
